#!/bin/bash

if [[ $UID == 0 ]]; then
  echo "please run this command with devops user"
  exit 1
fi

case $1 in
  jenkins)
    IP=192.168.122.10
    if [[ $2 == "ubuntu" ]]; then
	IMAGE=$DIR/CentOS-7-x86_64-GenericCloud.qcow2
    elif [[ $2 == "centos" ]]; then
    	IMAGE=$DIR/CentOS-7-x86_64-GenericCloud.qcow2
    else
	echo "Please, select ubuntu or centos for jenkins"
	exit 1
    fi
    ;;
  kubernetes)
    IP=192.168.122.11
    if [[ $2 == "ubuntu" ]]; then
	IMAGE=$DIR/CentOS-7-x86_64-GenericCloud.qcow2
    elif [[ $2 == "centos" ]]; then
    	IMAGE=$DIR/CentOS-7-x86_64-GenericCloud.qcow2
    else
	echo "Please, select ubuntu or centos"
	exit 1
    fi
    ;;
  node)
    if [[ $2 == "jenkins" ]]; then
        IP=192.168.122.12
	IMAGE=$DIR/CentOS-7-x86_64-GenericCloud.qcow2
    elif [[ $2 == "kubernetes" ]]; then
	IP=192.168.122.13
    	IMAGE=$DIR/CentOS-7-x86_64-GenericCloud.qcow2
    else
	echo "Please, select jenkins or kubernetes for the new node"
	exit 1
    fi
    ;;
  registry)
    IP=192.168.122.14
    ;;
  list)
    virsh list --all
    exit 1
    ;;
  *)
    echo "Invalid option, the options are: jenkins|kubernetes|node|registry|list"
    exit 1;;
esac

# Check if domain already exists
virsh dominfo $1 > /dev/null 2>&1
if [ "$?" -eq 0 ]; then
    echo -n "[WARNING] $1 already exists.  "
    read -p "Do you want to overwrite $1 [y/N]? " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo ""
    else
        echo -e "\nNot overwriting $1. Exiting..."
        exit 1
    fi
fi

# Directory to store images
DIR=/var/lib/libvirt/images/devops/images

# Location of cloud image
IMAGE=$DIR/CentOS-7-x86_64-GenericCloud.qcow2

# Amount of RAM in MB
MEM=768

# Number of virtual CPUs
CPUS=1

# Cloud init files
USER_DATA=user-data
META_DATA=meta-data
CI_ISO=$1-cidata.iso
DISK=$1.qcow2

# Bridge for VMs (default on Fedora is virbr0)
BRIDGE=virbr0

# Start clean
rm -rf $DIR/$1
mkdir -p $DIR/$1

pushd $DIR/$1 > /dev/null

    # Create log file
    touch $1.log
    echo "$(date -R) Destroying the $1 VM (if it exists)..."
    # Remove domain with the same name
    virsh destroy $1 >> $1.log 2>&1
    if [ $? -eq 1 ]; then
      virsh start $1
    fi
      virsh undefine $1 >> $1.log 2>&1

    # cloud-init config: set hostname, remove cloud-init package,
    # and add ssh-key 
    cat > $USER_DATA << _EOF_
#cloud-config

# Hostname management
preserve_hostname: False
hostname: $1
fqdn: $1.example.local

# Remove cloud-init when finished with it
runcmd:
  - [ yum, -y, remove, cloud-init ]
  - echo -e "\nUseDNS no" >> /etc/ssh/sshd_config

# Configure where output will go
output: 
  all: ">> /var/log/cloud-init.log"

# configure interaction with ssh server
ssh_svcname: ssh
ssh_deletekeys: True
ssh_genkeytypes: ['rsa', 'ecdsa']

users:
  - default
  - name: devops
    lock-passwd: false
    groups: wheel
    #plain_text_passwd: 'devops'
    ssh_authorized_keys:
      - $(cat /home/devops/.ssh/id_rsa.pub)

# Install my public ssh key to the first user-defined user configured 
# in cloud.cfg in the template (which is centos for CentOS cloud images)
ssh_authorized_keys:
  - $(cat /home/devops/.ssh/id_rsa.pub)
  #- ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCjDuuv85vBwqj9OdIllpwmNygqd5VjlBXmdFKJlc27FDGf0cKs7LzJls/M758pStUJGpxoGIaOeb1AmnKWoeL/Lm00wnEAR7MMsiMviKbEDaYTdrXrlVQyjzO3kwWnOjCLsnXNDb6n4BtkPNjpMn0zrYChUlWyY+F+RsEMsm6exZbViUnLmmx5VGH0mtsFSe5rS/onb1JdYDwJwnhob8MZG+h8zSh8VXIvbhkzZVw10AipKp6j8+mOeaPZ3QFYjOiURlNEM3FKVCSF4IOWW/ct1O/6845QQJ0nEZ6QrnOa8ZZhcAWWWpcx6DFfNTIAIA41+gpdEoj0LV3PikiQP7V/ devops@instructor.example.com

chpasswd:
  list: |
    root:centos
    devops:devops
  expire: False
_EOF_

    cat > $META_DATA << _EOF_
instance-id: $1
local-hostname: $1
network-interfaces: |
  auto eth0
  iface eth0 inet static
    address $IP
    network 192.168.122.0
    netmask 255.255.255.0
    broadcast 192.168.122.255
    gateway 192.168.122.1
    dns-nameservers 192.168.122.1
_EOF_

    echo "$(date -R) Copying template image..."
    cp $IMAGE $DISK

    # Create CD-ROM ISO with cloud-init config
    genisoimage -output $CI_ISO -volid cidata -joliet -r $USER_DATA $META_DATA &>> $1.log

    echo "$(date -R) Configuring $1 VM..."
    virt-install --import --name $1 --ram $MEM --vcpus $CPUS --disk \
    $DISK,format=qcow2,bus=virtio --disk $CI_ISO,device=cdrom --network \
    bridge=virbr0,model=virtio --os-type=linux --os-variant=centos7.0 --noautoconsole
    MAC=$(virsh dumpxml $1 | awk -F\' '/mac address/ {print $2}')
    while true
    do
        #IP=$(grep -B1 $MAC /var/lib/libvirt/dnsmasq/$BRIDGE.status | head \
        #     -n 1 | awk '{print $2}' | sed -e s/\"//g -e s/,//)
	IP=$(arp -an | grep $MAC |awk '{print $2}'|sed -e s/\(// -e s/\)// )
        if [ "$IP" = "" ]
        then
            sleep 1
        else
            break
        fi
    done
    # Eject cdrom
    virsh change-media $1 hda --eject --config >> $1.log
    # Remove the unnecessary cloud init files
    rm $USER_DATA $CI_ISO
    virsh autostart $1
    echo "$1 vm has been installed!, please connect using ssh devops@${IP} "
popd > /dev/null
